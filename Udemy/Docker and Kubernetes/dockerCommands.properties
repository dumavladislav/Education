################## RUNNING CONTAINERS ###########################
# Run the container from image "image_name" and Startup command "startup_command"
docker run image_name startup_command

# docker run is actually a combination of the two following commands
# create the container (allocate the disk segment, copy the file system from the image etc.)
# docker create returns the id of the created container
docker create image_name startup_command

# and start the container with id container_id
# flag -a means attache the output in order to actually see the output of the running container
docker start -a container_id

# "docker logs" can be used to see the output generated when the container with ID container_id was running (if you forget -a)
docker logs container_id

# clear (delete) stopped containers and some cache data
docker system prune


################## STOPPING CONTAINERS ###########################
# Gentle stopping - sends SIGTERM (terminate signal) to container with ID container_id. Gives 10 seconds for application to shut itself down - save files etc.
docker stop container_id
# Hard stopping - send SIGKILL (kill signal) - kills the application immediately 
docker kill container_id

################## LIST CONTAINERS ###########################
# list all running containers
docker ps
# list all containers ever running (in all states)
docker ps --all

################## RUNNING PROGRAMS AND SHELL INSIDE RUNNING CONTAINERS ###########################
# run another program in the already running container (in this case we run command "redis-cli" inside running container afd5a9313ca5)
# flag -it allows to be able to input data and have pretty formated output supporting all features like auto-complete etc.
docker exec -it afd5a9313ca5 redis-cli
# get the shell inside the running container (attache the shell in the running container)
docker exec -it afd5a9313ca5 sh
# run the container with shell
docker run -it busybox sh

# Ports mapping
# Redirect all incoming requests to local mahcine port port_on_localmachine TO port_in_container inside the container 
# Example: Redirect all incoming requests to local mahcine port 5000 TO 8080 inside the container - "docker run -p 5000:8080 vladislavduma/simpleweb"
docker run -p port_on_localmachine:port_in_container


# Volumes mapping
# In some cases we want to map references in the container to our host machine
# Like if we have source code locally, we don't want to rebuild the image each time we make changes in the code
# With the following line for example we assign /app folder in container reference to pwd (current working folder) on our host machine in odrder container to monitor changes in the code made locally. 
# We use ":" to map something from our local machine. In ohter words, map our local current working folder to /app folder in the container
# at the same time we don't want node_modules to be searched on our local machine - this folder is in the container. So this volume is not maaped outside the container
docker run -p 3000:3000 -v /app/node_modules -v "$(pwd):/app" 508a75910c25