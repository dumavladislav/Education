################## RUNNING CONTAINERS ###########################
# Run the container from image "image_name" and Startup command "startup_command"
docker run image_name startup_command

# docker run is actually a combination of the two following commands
# create the container (allocate the disk segment, copy the file system from the image etc.)
# docker create returns the id of the created container
docker create image_name startup_command

# and start the container with id container_id
# flag -a means attache the output in order to actually see the output of the running container
docker start -a container_id

# "docker logs" can be used to see the output generated when the container with ID container_id was running (if you forget -a)
docker logs container_id

# clear (delete) stopped containers and some cache data
docker system prune


################## STOPPING CONTAINERS ###########################
# Gentle stopping - sends SIGTERM (terminate signal) to container with ID container_id. Gives 10 seconds for application to shut itself down - save files etc.
docker stop container_id
# Hard stopping - send SIGKILL (kill signal) - kills the application immediately 
docker kill container_id

################## LIST CONTAINERS ###########################
# list all running containers
docker ps
# list all containers ever running (in all states)
docker ps --all

################## RUNNING PROGRAMS AND SHELL INSIDE RUNNING CONTAINERS ###########################
# run another program in the already running container (in this case we run command "redis-cli" inside running container afd5a9313ca5)
# flag -it allows to be able to input data and have pretty formated output supporting all features like auto-complete etc.
docker exec -it afd5a9313ca5 redis-cli
# get the shell inside the running container (attache the shell in the running container)
docker exec -it afd5a9313ca5 sh
# run the container with shell
docker run -it busybox sh